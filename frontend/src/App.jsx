import React, { useState, useEffect } from 'react'; // Aggiungi , useEffectimport { Plus, MessageSquare, X, Check, Clock, Euro, FileText, AlertCircle, LogOut, User, Settings, Users, AlertTriangle, Info, Zap, Copy, Calendar, Trash2, CornerDownLeft } from 'lucide-react';
import { Plus, MessageSquare, X, Check, Clock, Euro, FileText, AlertCircle, LogOut, User, Settings, Users, AlertTriangle, Info, Zap, Copy, Calendar, Trash2, CornerDownLeft } from 'lucide-react';

const initialUsers = [
  { id: 1, email: 'cliente@example.com', password: 'cliente123', ruolo: 'cliente', nome: 'Mario', cognome: 'Rossi', telefono: '333-1234567', azienda: 'Rossi SRL' },
  { id: 2, email: 'tecnico@example.com', password: 'tecnico123', ruolo: 'tecnico', nome: 'Alessandro', cognome: 'Bianchi', telefono: '333-7654321', azienda: 'IT Support' }
];

const initialTickets = [
  { id: 1, numero: 'TKT-2025-001', clienteId: 1, titolo: 'Problema con stampante di rete', descrizione: 'La stampante non risponde.', stato: 'aperto', priorita: 'urgente', dataApertura: '2025-10-01T10:00:00', daFatturare: true, categoria: 'assistenza', nomeRichiedente: 'Mario Rossi', timeLogs: [], messaggi: [{ id: 1, autore: 'Cliente', contenuto: 'La stampante non funziona.', data: '2025-10-01T10:00:00' }] },
  { id: 2, numero: 'TKT-2025-002', clienteId: 1, titolo: 'Richiesta licenza software', descrizione: 'Ho bisogno di una licenza per Adobe Cloud.', stato: 'in_lavorazione', priorita: 'media', dataApertura: '2025-09-25T15:00:00', daFatturare: true, categoria: 'installazione', nomeRichiedente: 'Mario Rossi', timeLogs: [], messaggi: [{ id: 1, autore: 'Cliente', contenuto: 'Licenza richiesta.', data: '2025-09-25T15:00:00' }] },
  { id: 3, numero: 'TKT-2025-003', clienteId: 1, titolo: 'PC riparato e testato', descrizione: 'PC riparato e testato', stato: 'risolto', priorita: 'bassa', dataApertura: '2025-09-20T11:00:00', daFatturare: true, categoria: 'manutenzione', nomeRichiedente: 'Mario Rossi', timeLogs: [{ data: '2025-10-04', oraInizio: '09:00', oraFine: '10:00', descrizione: 'Sostituzione RAM', modalita: 'Teleassistenza', materials: [{ nome: 'RAM DDR4 8GB', quantita: 1, costo: 35.00 }], oreIntervento: 1, costoUnitario: 50, sconto: 0 }], messaggi: [{ id: 1, autore: 'Cliente', contenuto: 'Riparazione richiesta.', data: '2025-09-20T11:00:00' }] },
  { id: 4, numero: 'TKT-2025-004', clienteId: 1, titolo: 'Archiviazione documenti', descrizione: 'Ticket di pulizia archivi.', stato: 'fatturato', priorita: 'bassa', dataApertura: '2025-09-10T14:00:00', dataChiusura: '2025-09-12T16:00:00', daFatturare: false, categoria: 'altro', nomeRichiedente: 'Mario Rossi', timeLogs: [], messaggi: [{ id: 1, autore: 'Cliente', contenuto: 'Ticket chiuso.', data: '2025-09-10T14:00:00' }] },
];

const getStatoColor = (stato) => ({aperto:'bg-blue-100 text-blue-800',in_lavorazione:'bg-yellow-100 text-yellow-800',risolto:'bg-green-100 text-green-800',chiuso:'bg-gray-100 text-gray-800',inviato:'bg-gray-300 text-gray-800 font-bold',fatturato:'bg-indigo-100 text-indigo-800'})[stato]||'bg-gray-100 text-gray-800';
const getPrioritaColor = (priorita) => ({bassa:'text-gray-600',media:'text-blue-600',alta:'text-orange-600',urgente:'text-red-600'})[priorita]||'text-gray-600';
const getPrioritaBgClass = (priorita) => { const c = {bassa:'bg-gray-100',media:'bg-blue-100',alta:'bg-orange-100',urgente:'bg-red-100'}; if(priorita==='media')return'bg-blue-200'; return c[priorita]||'bg-gray-100'; };
const getPrioritySolidBgClass = (priorita) => ({bassa:'bg-gray-500',media:'bg-blue-500',alta:'bg-orange-500',urgente:'bg-red-600'})[priorita]||'bg-gray-500';
const formatDate = (d) => d ? new Date(d).toLocaleDateString('it-IT',{day:'2-digit',month:'2-digit',year:'numeric',hour:'2-digit',minute:'2-digit'}) : '';
const formatTimeLogDate = (d) => d ? new Date(d).toLocaleDateString('it-IT',{day:'2-digit',month:'2-digit',year:'numeric'}) : '';
const formatReportDate = (d) => d ? new Date(d).toLocaleDateString('it-IT',{day:'2-digit',month:'2-digit',year:'numeric'}).replace(/\//g,'-') : '';
const calculateDurationHours=(s,e)=>{if(!s||!e)return 0;try{const sd=new Date(`1970-01-01T${s}`);const ed=new Date(`1970-01-01T${e}`);if(isNaN(sd)||isNaN(ed)||ed<=sd)return 0;return(ed-sd)/(36e5)}catch(err){return 0}};
const getInitialMaterial = () => ({id:Date.now()+Math.random(),nome:'',quantita:1,costo:0.00});
const getInitialTimeLog = () => ({id:Date.now(),data:new Date().toISOString().substring(0,10),oraInizio:'09:00',oraFine:'10:00',descrizione:'',modalita:'Telefonica',materials:[getInitialMaterial()],oreIntervento:1.0,costoUnitario:50.00,sconto:0,});

const Notification = ({ notification, setNotification }) => {
  if (!notification || !notification.show) return null;
  const typeStyles = { success: 'bg-green-600', error: 'bg-red-600', info: 'bg-blue-600' };
  const Icon = notification.type === 'success' ? Check : (notification.type === 'error' ? AlertCircle : Info);
  return (
    <div className="fixed bottom-4 right-4 z-[100]"><div className={`flex items-center p-4 rounded-xl shadow-2xl text-white ${typeStyles[notification.type]}`}><Icon size={24} className="mr-3"/><span>{notification.message}</span><button onClick={()=>setNotification(p=>({...p,show:false}))} className="ml-4 p-1 rounded-full hover:bg-white/20"><X size={16}/></button></div></div>
  );
};

const LoginScreen = ({ loginData, setLoginData, handleLogin, handleAutoFillLogin }) => (
  <div className="min-h-screen bg-gradient-to-br from-blue-500 to-blue-700 flex items-center justify-center p-4">
    <div className="bg-white rounded-2xl shadow-2xl w-full max-w-md p-8">
      <div className="text-center mb-8"><div className="bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4"><User size={32} className="text-blue-600"/></div><h1 className="text-3xl font-bold">Sistema Ticketing</h1><p className="text-gray-600">Accedi per gestire i tuoi ticket</p></div>
      <div className="space-y-4">
        <div><label className="block text-sm font-medium text-gray-700 mb-2">Email</label><input type="email" value={loginData.email} onChange={(e)=>setLoginData({...loginData,email:e.target.value})} onKeyPress={(e)=>e.key==='Enter'&&handleLogin()} className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="email@example.com"/></div>
        <div><label className="block text-sm font-medium text-gray-700 mb-2">Password</label><input type="password" value={loginData.password} onChange={(e)=>setLoginData({...loginData,password:e.target.value})} onKeyPress={(e)=>e.key==='Enter'&&handleLogin()} className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="••••••••"/></div>
        <button onClick={handleLogin} className="w-full py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700">Accedi</button>
      </div>
      <div className="mt-8 p-4 bg-gray-50 rounded-lg"><p className="text-xs font-semibold mb-2">Account di prova:</p><div className="space-y-2 text-xs"><button onClick={()=>handleAutoFillLogin('cliente')} className="w-full text-left p-1 rounded-md hover:bg-gray-100">Cliente: cliente@example.com / cliente123</button><button onClick={()=>handleAutoFillLogin('tecnico')} className="w-full text-left p-1 rounded-md hover:bg-gray-100">Tecnico: tecnico@example.com / tecnico123</button></div></div>
    </div>
  </div>
);

const ChatInterface = ({ ticket, currentUser, setSelectedTicket, handleSendMessage, handleChangeStatus }) => {
    const [newMessage, setNewMessage] = useState('');
    const onSendMessage = (isReclamo = false) => { handleSendMessage(ticket.id, newMessage, isReclamo); setNewMessage(''); };
    return (<div className="bg-white rounded-xl shadow-lg border-t"><div className="p-4 border-b flex items-center justify-between bg-blue-50 rounded-t-xl"><h3 className="font-bold text-lg">Conversazione Ticket {ticket.numero}</h3><button onClick={()=>setSelectedTicket(null)} className="text-gray-500 hover:text-gray-700"><X size={20}/></button></div><div className="p-4 max-h-[50vh] overflow-y-auto space-y-3">{ticket.timeLogs?.length>0&&(<div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-lg mt-4 space-y-3"><h4 className="font-bold text-sm text-blue-800 flex items-center gap-2"><Clock size={16}/>Log Interventi</h4><div className="space-y-3">{ticket.timeLogs.map((log,index)=>{let d='--';if(log.oraInizio&&log.oraFine){const s=new Date(`2000/01/01 ${log.oraInizio}`);const e=new Date(`2000/01/01 ${log.oraFine}`);const m=Math.round((e-s)/6e4);const h=Math.floor(m/60);d=`${h}h ${m%60}m`}const tmc=log.materials?.reduce((s,m)=>s+(m.quantita*m.costo),0)||0;const o=parseFloat(log.oreIntervento)||0;const c=parseFloat(log.costoUnitario)||0;const s=parseFloat(log.sconto)||0;const tic=(c*(1-(s/100)))*o;return(<div key={index} className="bg-white p-3 rounded-lg border"><div className="flex justify-between items-center text-sm mb-2 pb-1 border-b"><span className="font-bold text-blue-600 flex items-center gap-1"><Calendar size={14}/>{formatTimeLogDate(log.data)}</span><div className="flex items-center gap-2"><span className="font-bold bg-gray-100 px-2 py-1 rounded-full text-sm">{log.oraInizio}-{log.oraFine}</span><span className="font-bold bg-gray-100 px-2 py-1 rounded-full text-sm">Durata:{d}</span></div></div><div className="text-sm mb-2">{log.descrizione||"Nessuna descrizione."}</div><div className="mt-3 pt-3 border-t text-xs space-y-1">{log.materials?.some(m=>m.nome)&&(<> <div className="font-bold">Materiali:</div>{log.materials.map((m,i)=>(<div key={i} className="flex justify-between pl-2"><span>-{m.nome}(x{m.quantita})</span><span>{(m.quantita*m.costo).toFixed(2)}€</span></div>))}</>)}<div className="flex justify-between"><span className="font-bold">Manodopera({o.toFixed(2)}h):</span><span>{tic.toFixed(2)}€</span></div><div className="flex justify-between text-sm font-bold pt-1 mt-1 border-t"><span className="text-blue-800">Totale:</span><span className="text-blue-800">{(tmc+tic).toFixed(2)}€</span></div></div></div>)})}</div></div>)}{ticket.messaggi.map(m=>(<React.Fragment key={m.id}>{m.reclamo&&(m.autore===ticket.nomeRichiedente||m.autore==='Cliente')&&(<div className="text-center my-2"><span className="inline-flex items-center gap-2 px-3 py-1 text-xs font-bold text-red-800 bg-red-100 rounded-full border"><AlertTriangle size={14}/>RECLAMO</span></div>)}<div className={m.autore===ticket.nomeRichiedente||m.autore==='Cliente'?'text-left':'text-right'}><div className={`inline-block max-w-[80%] rounded-xl shadow p-3 ${m.reclamo?'bg-red-50 border-2 border-red-500':m.autore===ticket.nomeRichiedente||m.autore==='Cliente'?'bg-gray-100':'bg-blue-600 text-white'}`}><div className={`flex items-center gap-1 text-xs mb-1 ${m.autore===ticket.nomeRichiedente||m.autore==='Cliente'?'text-gray-600':'text-white/80'}`}><span className={m.reclamo?'text-red-700 font-bold':'font-medium'}>{m.reclamo?'⚠️ RECLAMO - ':''}{m.autore}</span></div><div className={`text-sm whitespace-pre-wrap ${m.reclamo?'text-red-900 font-medium':''}`}>{m.contenuto}</div><div className={`text-xs opacity-75 mt-1 ${m.reclamo?'text-red-700':m.autore===ticket.nomeRichiedente||m.autore==='Cliente'?'text-gray-500':'text-white/60'}`}>{formatDate(m.data)}</div></div></div></React.Fragment>))}</div>{!['chiuso','fatturato','inviato'].includes(ticket.stato)&&(<div className="p-4 border-t">{currentUser.ruolo==='cliente'&&ticket.stato==='risolto'?(<div className="space-y-3"><div className="bg-yellow-50 border p-3 text-sm"><p className="font-medium">L'intervento è risolto.</p><p className="mt-1">Puoi **Accettare** o inviare un **Reclamo**.</p></div><button onClick={()=>handleChangeStatus(ticket.id,'chiuso')} className="w-full px-4 py-3 bg-green-600 text-white rounded-lg font-bold flex items-center justify-center gap-2"><Check size={18}/>Accetta e Chiudi</button><div className="relative"><textarea value={newMessage} onChange={(e)=>setNewMessage(e.target.value)} placeholder="Motivo del reclamo..." rows={3} className="w-full px-3 py-2 border-2 border-red-500 bg-red-50 rounded-lg placeholder-red-400"/><div className="absolute top-2 right-2 bg-red-100 px-2 py-1 text-xs font-bold text-red-700 flex items-center gap-1"><AlertTriangle size={12}/>RECLAMO</div></div><button onClick={()=>onSendMessage(true)} disabled={!newMessage.trim()} className="w-full px-4 py-2 bg-red-600 text-white rounded-lg disabled:opacity-50 font-medium flex items-center justify-center gap-2"><AlertTriangle size={18}/>Invia Reclamo</button></div>):(<><div className="flex gap-2"><input type="text" value={newMessage} onChange={(e)=>setNewMessage(e.target.value)} onKeyPress={(e)=>e.key==='Enter'&&onSendMessage()} placeholder="Scrivi messaggio..." className="flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"/><button onClick={()=>onSendMessage()} disabled={!newMessage.trim()} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"><MessageSquare size={18}/></button></div>{currentUser.ruolo==='tecnico'&&(<div className="flex gap-2 mt-3">{ticket.stato==='aperto'&&(<button onClick={()=>handleChangeStatus(ticket.id,'in_lavorazione')} className="flex-1 px-3 py-2 bg-yellow-600 text-white rounded-lg text-sm">Prendi in carico</button>)}{ticket.stato==='in_lavorazione'&&(<button onClick={()=>handleChangeStatus(ticket.id,'risolto')} className="flex-1 px-3 py-2 bg-green-600 text-white rounded-lg text-sm">Segna come risolto</button>)}</div>)}</>)}</div>)}{['chiuso','fatturato','inviato'].includes(ticket.stato)&&(<div className="p-4 border-t bg-gray-50 text-center text-gray-600 font-medium rounded-b-xl">{ticket.stato==='chiuso'&&<span>Ticket **chiuso** il {formatDate(ticket.dataChiusura)}.</span>}{ticket.stato==='inviato'&&<span>Ticket **inviato per fatturazione** il {formatDate(ticket.dataChiusura)}.</span>}{ticket.stato==='fatturato'&&<span>Ticket **FATTURATO** il {formatDate(ticket.dataChiusura)}.</span>}</div>)}</div>)
};

const TicketItem = ({ ticket, cliente, currentUser, selectedTicket, ...handlers }) => {
    const { handleSelectTicket,handleOpenEditModal,handleOpenTimeLogger,handleReopenInLavorazione,handleChangeStatus,handleReopenAsRisolto,handleSetInviato,handleArchiveTicket,handleInvoiceTicket,handleDeleteTicket,handleSendMessage,showNotification } = handlers;
    const isTicketOpen=ticket.stato==='aperto'; const canDelete=currentUser.ruolo==='tecnico'||(currentUser.ruolo==='cliente'&&isTicketOpen);
    return (<React.Fragment><div onClick={()=>handleSelectTicket(ticket)} className={`cursor-pointer hover:bg-gray-50 border-b relative overflow-hidden ${selectedTicket?.id===ticket.id?'bg-blue-50':'bg-white'} ${ticket.isNew?`${getPrioritaBgClass(ticket.priorita)} animate-pulse shadow-md`:''} p-4 pl-5`}><div className={`absolute top-0 left-0 h-full w-1 ${getPrioritySolidBgClass(ticket.priorita)}`}></div><div className="flex items-start justify-between"><div className="flex-1"><div className="flex items-center gap-2 mb-1 flex-wrap"><span className="text-sm font-mono text-gray-500 font-semibold">{ticket.numero}</span>{currentUser.ruolo==='tecnico'&&cliente&&(<span className="px-2 py-0.5 text-xs rounded-full bg-purple-100 text-purple-800 flex items-center gap-1"><User size={12}/>{cliente.azienda}</span>)}<span className={`px-2 py-0.5 text-xs rounded-full font-medium ${getStatoColor(ticket.stato)}`}>{ticket.stato.replace('_',' ')}</span></div><h3 className="text-lg font-bold">{ticket.titolo}</h3><p className="text-sm text-gray-600 mt-1 line-clamp-2">Richiedente:<span className="font-semibold">{ticket.nomeRichiedente}</span> - {ticket.descrizione}</p><div className="flex items-center gap-3 mt-2 text-xs text-gray-500 flex-wrap"><span className={`flex items-center gap-1 font-medium ${getPrioritaColor(ticket.priorita)}`}><AlertCircle size={14}/>{ticket.priorita.toUpperCase()}</span><span>{ticket.categoria}</span>{['risolto','chiuso','inviato','fatturato'].includes(ticket.stato)&&ticket.timeLogs?.[0]?.modalita&&(<span className="px-2 py-0.5 text-xs rounded-full bg-green-50 text-green-700 font-bold flex items-center gap-1"><Zap size={12}/>{ticket.timeLogs[0].modalita}</span>)}<span className="flex items-center gap-1"><Clock size={14}/>{formatDate(ticket.dataApertura)}</span>{ticket.dataChiusura&&(<span className="text-green-600 flex items-center gap-1 font-medium"><Check size={14}/>Chiuso:{formatDate(ticket.dataChiusura)}</span>)}</div></div><div className="flex gap-1">{currentUser.ruolo==='tecnico'&&(<>{(currentUser.ruolo==='tecnico')&&(<button onClick={(e)=>{e.stopPropagation();handleOpenEditModal(ticket);}} title="Modifica ticket" className="p-1 rounded-full text-blue-500 hover:bg-blue-100"><Settings size={18}/></button>)}{currentUser.ruolo==='tecnico'&&ticket.timeLogs?.length>0&&['risolto','chiuso','inviato'].includes(ticket.stato)&&(<button onClick={(e)=>{e.stopPropagation();handleOpenTimeLogger(ticket);}} title="Modifica interventi" className="p-1 rounded-full text-gray-500 hover:bg-gray-100"><Clock size={18}/></button>)}{currentUser.ruolo==='tecnico'&&ticket.stato==='risolto'&&(<button onClick={(e)=>{e.stopPropagation();handleReopenInLavorazione(ticket.id);}} title="Riapri" className="p-1 rounded-full text-yellow-500 hover:bg-yellow-100"><CornerDownLeft size={18}/></button>)}{currentUser.ruolo==='tecnico'&&ticket.stato==='risolto'&&(<button onClick={(e)=>{e.stopPropagation();handleChangeStatus(ticket.id,'chiuso');}} title="Chiudi" className="p-1 rounded-full text-green-500 hover:bg-green-100"><Check size={18}/></button>)}{currentUser.ruolo==='tecnico'&&ticket.stato==='chiuso'&&(<button onClick={(e)=>{e.stopPropagation();handleReopenAsRisolto(ticket.id);}} title="Sposta in Risolto" className="p-1 rounded-full text-yellow-500 hover:bg-yellow-100"><CornerDownLeft size={18}/></button>)}{currentUser.ruolo==='tecnico'&&ticket.stato==='chiuso'&&(<button onClick={(e)=>{e.stopPropagation();handleSetInviato(ticket.id);}} title="Invia" className="p-1 rounded-full text-green-500 hover:bg-green-100"><Check size={18}/></button>)}{currentUser.ruolo==='tecnico'&&ticket.stato==='inviato'&&(<button onClick={(e)=>{e.stopPropagation();handleArchiveTicket(ticket.id);}} title="Archivia" className="p-1 rounded-full text-yellow-500 hover:bg-yellow-100"><CornerDownLeft size={18}/></button>)}{currentUser.ruolo==='tecnico'&&['chiuso','inviato'].includes(ticket.stato)&&(<button onClick={(e)=>{e.stopPropagation();handleInvoiceTicket(ticket.id);}} title="Fattura" className="p-1 rounded-full text-indigo-500 hover:bg-indigo-100"><Euro size={18}/></button>)}</>)}{canDelete&&(<button onClick={(e)=>{e.stopPropagation();if(canDelete){handleDeleteTicket(ticket.id);}else{showNotification('Non puoi eliminare un ticket in lavorazione.','info');}}} title={!canDelete&&currentUser.ruolo==='cliente'?'Non eliminabile':'Elimina'} className={`p-1 rounded-full ${canDelete?'text-red-500 hover:bg-red-100':'text-gray-400 cursor-not-allowed'}`}><Trash2 size={18}/></button>)}</div></div></div>{selectedTicket?.id===ticket.id&&(<div className="bg-gray-50"><ChatInterface ticket={ticket} currentUser={currentUser} setSelectedTicket={handleSelectTicket} handleSendMessage={handleSendMessage} handleChangeStatus={handleChangeStatus}/></div>)}</React.Fragment>);
};

const TicketListContainer = ({ currentUser, tickets, users, clientiAttivi, selectedTicket, ...handlers }) => {
    const [clientViewState, setClientViewState] = useState('aperto');
    const [technicianViewState, setTechnicianViewState] = useState('tutti');
    const [selectedClientFilter, setSelectedClientFilter] = useState('all');
    let displayTickets;
    if (currentUser.ruolo === 'cliente') { displayTickets = tickets.filter(t => t.clienteId === currentUser.id && t.stato === clientViewState); } 
    else { let filtered = selectedClientFilter === 'all' ? tickets : tickets.filter(t => t.clienteId === parseInt(selectedClientFilter)); displayTickets = technicianViewState === 'tutti' ? filtered : filtered.filter(t => t.stato === technicianViewState); }
    const counts = (arr) => ({aperto:arr.filter(t=>t.stato==='aperto').length,in_lavorazione:arr.filter(t=>t.stato==='in_lavorazione').length,risolto:arr.filter(t=>t.stato==='risolto').length,chiuso:arr.filter(t=>t.stato==='chiuso').length,inviato:arr.filter(t=>t.stato==='inviato').length,fatturato:arr.filter(t=>t.stato==='fatturato').length});
    const clientTicketCounts = counts(tickets.filter(t => t.clienteId === currentUser.id));
    const technicianTicketCounts = {...counts(tickets), tutti: tickets.length};
    return (<div className="bg-white rounded-xl shadow-lg"><div className="p-4 border-b"><h2 className="text-xl font-semibold mb-3">{currentUser.ruolo==='cliente'?'I Miei Interventi':'Lista Ticket'}</h2>{currentUser.ruolo==='tecnico'&&(<> <div className="flex gap-2 p-1 bg-gray-100 rounded-lg mb-4">{Object.keys(technicianTicketCounts).map(s=>(<button key={s} onClick={()=>setTechnicianViewState(s)} className={`flex-1 px-3 py-2 text-xs font-medium rounded-lg capitalize ${technicianViewState===s?'bg-blue-600 text-white shadow':'text-gray-700 hover:bg-gray-200'}`}>{s.replace('_',' ')} ({technicianTicketCounts[s]})</button>))}</div>{technicianViewState==='inviato'&&(<button onClick={()=>handlers.handleGenerateSentReport(displayTickets)} className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg mb-3"><FileText size={18}/>Genera Report</button>)}{technicianViewState==='fatturato'&&(<button onClick={()=>handlers.handleGenerateInvoiceReport(displayTickets)} className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg mb-3"><FileText size={18}/>Genera Lista Fatture</button>)}<div className="mb-3"><label className="block text-sm font-medium mb-2">Filtra per cliente</label><select value={selectedClientFilter} onChange={(e)=>setSelectedClientFilter(e.target.value)} className="w-full px-3 py-2 border rounded-lg"><option value="all">Tutti i clienti</option>{clientiAttivi.map(c=>(<option key={c.id} value={c.id}>{c.azienda} ({tickets.filter(t=>t.clienteId===c.id).length})</option>))}</select></div></>)}{currentUser.ruolo==='cliente'&&(
    <div className="flex gap-2 p-1 bg-gray-100 rounded-lg">{Object.keys(clientTicketCounts).map(s=>(<button key={s} onClick={()=>setClientViewState(s)} className={`flex-1 px-3 py-2 text-xs font-medium rounded-lg capitalize ${clientViewState===s?'bg-blue-600 text-white shadow':'text-gray-700 hover:bg-gray-200'}`}>{s.replace('_',' ')} ({clientTicketCounts[s]})</button>))}</div>)}</div><div className="divide-y">{displayTickets.length===0?(<div className="p-8 text-center text-gray-500"><FileText size={48} className="mx-auto mb-3 opacity-30"/><p>Nessun intervento con lo stato selezionato.</p></div>):(displayTickets.sort((a,b)=>new Date(b.dataApertura)-new Date(a.dataApertura)).map(t=>(<TicketItem key={t.id} ticket={t} cliente={users.find(u=>u.id===t.clienteId)} currentUser={currentUser} selectedTicket={selectedTicket} {...handlers}/>)))}</div></div>)
};

const Header = ({ currentUser, handleLogout, openNewTicketModal, openNewClientModal, openSettings }) => (
    <div className="bg-white border-b"><div className="max-w-7xl mx-auto px-4 py-4"><div className="flex items-center justify-between flex-wrap gap-4"><div><h1 className="text-2xl font-bold">Sistema Gestione Ticket</h1><p className="text-sm text-gray-600 mt-1"><span className={`px-2 py-0.5 rounded text-xs font-medium ${currentUser.ruolo==='cliente'?'bg-blue-100 text-blue-800':'bg-green-100 text-green-800'}`}>{currentUser.ruolo.toUpperCase()}</span><span className="ml-2">{currentUser.nome} - {currentUser.azienda}</span></p></div><div className="flex items-center gap-2">{currentUser.ruolo==='cliente'&&(<button onClick={openNewTicketModal} className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg"><Plus size={18}/>Nuovo Ticket</button>)}{currentUser.ruolo==='tecnico'&&(<> <button onClick={openNewTicketModal} className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg"><Plus size={18}/>Nuovo Ticket</button><button onClick={openNewClientModal} className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg"><Users size={18}/>Nuovo Cliente</button></>)}<button onClick={openSettings} className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg"><Settings size={18}/></button><button onClick={handleLogout} className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg"><LogOut size={18}/></button></div></div></div></div>
);

const AllModals = ({ modalState, closeModal, ...handlers }) => {
    if (!modalState.type) return null;
    const { newTicketData,setNewTicketData,handleCreateTicket,isEditingTicket,currentUser,clientiAttivi,selectedClientForNewTicket,setSelectedClientForNewTicket,resetNewTicketData, timeLogs,setTimeLogs,handleTimeLogChange,handleAddTimeLog,handleRemoveTimeLog,handleDuplicateTimeLog,handleMaterialChange,handleAddMaterial,handleRemoveMaterial,handleConfirmTimeLogs, settingsData,setSettingsData,handleUpdateSettings, newClientData,setNewClientData,handleCreateClient, handleConfirmUrgentCreation, showNotification } = handlers;
    
    const renderModalContent = () => {
        switch (modalState.type) {
            case 'newTicket': return <div className="bg-white rounded-xl max-w-2xl w-full p-6 max-h-[90vh] overflow-y-auto"><div className="flex items-center justify-between mb-6 border-b pb-3"><h2 className="text-2xl font-bold text-blue-700 flex items-center gap-2">{isEditingTicket?<Settings size={24}/>:<Plus size={24}/>}{isEditingTicket?'Modifica Ticket':'Nuovo Ticket'}</h2><button onClick={closeModal} className="text-gray-400"><X size={24}/></button></div><div className="space-y-4">{currentUser.ruolo==='tecnico'&&<div><label className="block text-sm font-medium mb-1">Cliente</label><select value={selectedClientForNewTicket} onChange={(e)=>setSelectedClientForNewTicket(e.target.value)} className="w-full px-3 py-2 border rounded-lg bg-yellow-50"><option value="" disabled>-- Seleziona --</option>{clientiAttivi.map(c=>(<option key={c.id} value={c.id}>{c.azienda}</option>))}</select></div>}<div><label className="block text-sm font-medium mb-1">Richiedente</label><input type="text" value={newTicketData.nomeRichiedente} onChange={(e)=>setNewTicketData({...newTicketData,nomeRichiedente:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div><label className="block text-sm font-medium mb-1">Titolo</label><input type="text" value={newTicketData.titolo} onChange={(e)=>setNewTicketData({...newTicketData,titolo:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div><label className="block text-sm font-medium mb-1">Descrizione</label><textarea value={newTicketData.descrizione} onChange={(e)=>setNewTicketData({...newTicketData,descrizione:e.target.value})} rows={4} className="w-full px-3 py-2 border rounded-lg"/></div><div className="grid grid-cols-2 gap-4"><div><label className="block text-sm mb-1">Categoria</label><select value={newTicketData.categoria} onChange={(e)=>setNewTicketData({...newTicketData,categoria:e.target.value})} className="w-full px-3 py-2 border rounded-lg"><option>Assistenza</option><option>Manutenzione</option><option>Installazione</option><option>Altro</option></select></div><div><label className="block text-sm mb-1">Priorità</label><select value={newTicketData.priorita} onChange={(e)=>setNewTicketData({...newTicketData,priorita:e.target.value})} className="w-full px-3 py-2 border rounded-lg"><option>Bassa</option><option>Media</option><option>Alta</option><option>Urgente</option></select></div></div><div className="flex gap-3 pt-2"><button onClick={resetNewTicketData} className="flex-1 px-4 py-3 border rounded-lg">Pulisci</button><button onClick={closeModal} className="flex-1 px-4 py-3 border rounded-lg text-red-600 hover:bg-red-50">Annulla</button><button onClick={handleCreateTicket} className="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg font-bold">{isEditingTicket?'Salva':'Crea'}</button></div></div></div>;
            case 'timeLogger': return <div className="bg-white rounded-xl max-w-4xl w-full p-6 max-h-[90vh] overflow-y-auto"><div className="flex items-center justify-between mb-6 border-b pb-3"><h2 className="text-2xl font-bold text-blue-700 flex items-center gap-2"><Clock size={24}/>Registra Intervento</h2><button onClick={closeModal} className="text-gray-400"><X size={24}/></button></div><div className="space-y-6"><div className="bg-blue-50 p-3 rounded-lg text-sm">Ticket: **{modalState.data.numero} - {modalState.data.titolo}**</div>{timeLogs.map((log,index)=>{const o=parseFloat(log.oreIntervento)||0;const c=parseFloat(log.costoUnitario)||0;const s=parseFloat(log.sconto)||0;const t=(c*(1-(s/100)))*o;return(<div key={log.id} className="p-4 border rounded-lg bg-white relative"><h3 className="mb-3 flex justify-between">Intervento #{index+1}<div className="flex gap-2">{timeLogs.length>1&&<button onClick={()=>handleRemoveTimeLog(log.id)} className="text-red-500 p-1"><Trash2 size={18}/></button>}<button onClick={()=>handleDuplicateTimeLog(log)} className="text-blue-500 p-1"><Copy size={18}/></button></div></h3><div className="grid md:grid-cols-4 gap-4 mb-4"><div><label className="block text-xs mb-1">Modalità</label><select value={log.modalita} onChange={(e)=>handleTimeLogChange(log.id,'modalita',e.target.value)} className="w-full px-3 py-2 border rounded-lg text-sm"><option>Telefonica</option><option>Teleassistenza</option><option>Presso il Cliente</option><option>In laboratorio</option></select></div><div><label className="block text-xs mb-1">Data</label><input type="date" value={log.data} onChange={(e)=>handleTimeLogChange(log.id,'data',e.target.value)} className="w-full px-3 py-2 border rounded-lg text-sm"/></div><div><label className="block text-xs mb-1">Ora Inizio</label><input type="time" value={log.oraInizio} step="900" onChange={(e)=>{const s=e.target.value;const d=calculateDurationHours(s,log.oraFine);setTimeLogs(p=>p.map(l=>l.id===log.id?{...l,oraInizio:s,oreIntervento:d.toFixed(2)}:l))}} className="w-full px-3 py-2 border rounded-lg text-sm"/></div><div><label className="block text-xs mb-1">Ora Fine</label><input type="time" value={log.oraFine} step="900" onChange={(e)=>{const s=e.target.value;const d=calculateDurationHours(log.oraInizio,s);setTimeLogs(p=>p.map(l=>l.id===log.id?{...l,oraFine:s,oreIntervento:d.toFixed(2)}:l))}} className="w-full px-3 py-2 border rounded-lg text-sm"/></div></div><input type="text" value={log.descrizione} onChange={(e)=>handleTimeLogChange(log.id,'descrizione',e.target.value)} placeholder="Descrizione" className="w-full px-3 py-2 border rounded-lg text-sm"/><div className="mt-5 border-t pt-4"><h4 className="text-sm font-bold mb-3">Costo Manodopera</h4><div className="grid sm:grid-cols-5 gap-4 items-end"><div><label className="block text-xs mb-1">Ore</label><input type="number" step="0.25" value={log.oreIntervento} onChange={(e)=>handleTimeLogChange(log.id,'oreIntervento',e.target.value)} className="w-full px-3 py-2 border rounded-lg text-sm"/></div><div><label className="block text-xs mb-1">Costo Unit.(€)</label><input type="number" step="0.01" value={log.costoUnitario} onChange={(e)=>handleTimeLogChange(log.id,'costoUnitario',e.target.value)} className="w-full px-3 py-2 border rounded-lg text-sm"/></div><div><label className="block text-xs mb-1">Sconto(%)</label><input type="number" value={log.sconto} onChange={(e)=>handleTimeLogChange(log.id,'sconto',e.target.value)} className="w-full px-3 py-2 border rounded-lg text-sm"/></div><div><label className="block text-xs mb-1">Costo Scontato</label><div className="p-2.5 bg-gray-100 rounded-lg font-bold">{(c*(1-(s/100))).toFixed(2)}€</div></div><div><label className="block text-xs mb-1">Totale</label><div className="p-2.5 bg-blue-100 rounded-lg font-bold text-blue-800">{t.toFixed(2)}€</div></div></div></div><div className="mt-5 border-t pt-4"><h4 className="text-sm font-bold mb-3 flex items-center gap-2"><Users size={16}/>Materiali</h4><div className="space-y-3">{log.materials?.map(m=>(<div key={m.id} className="grid grid-cols-6 gap-3 items-center p-2 bg-gray-50 rounded-lg border"><div className="col-span-2"><label className="block text-xs mb-1">Materiale</label><input type="text" value={m.nome} onChange={(e)=>handleMaterialChange(log.id,m.id,'nome',e.target.value)} className="w-full px-2 py-1 border rounded-lg text-sm"/></div><div className="col-span-1"><label className="block text-xs mb-1">Qta</label><input type="number" min="1" value={m.quantita} onChange={(e)=>handleMaterialChange(log.id,m.id,'quantita',e.target.value)} className="w-full px-2 py-1 border rounded-lg text-sm"/></div><div className="col-span-2"><label className="block text-xs mb-1">Costo (€)</label><input type="number" step="0.01" value={m.costo.toFixed(2)} onChange={(e)=>handleMaterialChange(log.id,m.id,'costo',e.target.value)} className="w-full px-2 py-1 border rounded-lg text-sm"/></div><div className="col-span-1 pt-4 text-right">{log.materials.length>1&&<button onClick={()=>handleRemoveMaterial(log.id,m.id)} className="text-red-500 p-1"><Trash2 size={18}/></button>}</div></div>))}<button onClick={()=>handleAddMaterial(log.id)} className="w-full text-blue-500 text-xs font-medium flex items-center justify-center gap-1 mt-2 p-1"><Plus size={14}/>Aggiungi Materiale</button></div></div></div>)})} <button onClick={handleAddTimeLog} className="w-full px-4 py-2 border border-blue-500 text-blue-600 rounded-lg flex items-center justify-center gap-2"><Plus size={18}/>Aggiungi Intervallo</button><div className="flex gap-3 pt-4 border-t"><button onClick={closeModal} className="flex-1 px-4 py-3 border rounded-lg">Annulla</button><button onClick={handleConfirmTimeLogs} className="flex-1 px-4 py-3 bg-green-600 text-white rounded-lg font-bold flex items-center justify-center gap-2"><Check size={18}/>Conferma e Risolvi</button></div></div></div>;
            case 'settings': return <div className="bg-white rounded-xl max-w-md w-full p-6"><div className="flex items-center justify-between mb-6 border-b pb-3"><h2 className="text-2xl font-bold flex items-center gap-2"><Settings size={24}/>Impostazioni</h2><button onClick={closeModal} className="text-gray-400"><X size={24}/></button></div><div className="space-y-4"><div><label className="block text-sm mb-1">Nome</label><input type="text" value={settingsData.nome} onChange={(e)=>setSettingsData({...settingsData,nome:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div><label className="block text-sm mb-1">Email</label><input type="email" value={settingsData.email} onChange={(e)=>setSettingsData({...settingsData,email:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div className="border-t pt-4"><h3 className="text-sm font-bold mb-3">Cambia Password</h3><div className="space-y-3"><div><label className="block text-sm mb-1">Vecchia</label><input type="password" value={settingsData.vecchiaPassword} onChange={(e)=>setSettingsData({...settingsData,vecchiaPassword:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div><label className="block text-sm mb-1">Nuova</label><input type="password" value={settingsData.nuovaPassword} onChange={(e)=>setSettingsData({...settingsData,nuovaPassword:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div><label className="block text-sm mb-1">Conferma</label><input type="password" value={settingsData.confermaNuovaPassword} onChange={(e)=>setSettingsData({...settingsData,confermaNuovaPassword:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div></div></div><div className="flex gap-3 pt-2"><button onClick={closeModal} className="flex-1 px-4 py-3 border rounded-lg">Annulla</button><button onClick={handleUpdateSettings} className="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg font-bold">Salva</button></div></div></div>;
            case 'newClient': return <div className="bg-white rounded-xl max-w-2xl w-full p-6"><div className="flex items-center justify-between mb-6 border-b pb-3"><h2 className="text-2xl font-bold text-green-700 flex items-center gap-2"><Users size={24}/>Nuovo Cliente</h2><button onClick={closeModal} className="text-gray-400"><X size={24}/></button></div><div className="space-y-4"><div><label className="block text-sm mb-1">Azienda</label><input type="text" value={newClientData.azienda} onChange={(e)=>setNewClientData({...newClientData,azienda:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div><label className="block text-sm mb-1">Email</label><input type="email" value={newClientData.email} onChange={(e)=>setNewClientData({...newClientData,email:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div className="grid sm:grid-cols-2 gap-4"><div><label className="block text-sm mb-1">Password</label><input type="password" value={newClientData.password} onChange={(e)=>setNewClientData({...newClientData,password:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div><div><label className="block text-sm mb-1">Telefono</label><input type="tel" value={newClientData.telefono} onChange={(e)=>setNewClientData({...newClientData,telefono:e.target.value})} className="w-full px-3 py-2 border rounded-lg"/></div></div><div className="flex gap-3 pt-2"><button onClick={closeModal} className="flex-1 px-4 py-3 border rounded-lg">Annulla</button><button onClick={handleCreateClient} className="flex-1 px-4 py-3 bg-green-600 text-white rounded-lg font-bold">Crea</button></div></div></div>;
            case 'urgentConfirm': return <div className="bg-white rounded-xl max-w-sm w-full p-6"><div className="text-center mb-4"><AlertTriangle size={48} className="text-red-600 mx-auto mb-3"/><h2 className="text-xl font-bold">Conferma Urgente</h2></div><div className="text-sm mb-6 p-3 border border-red-200 bg-red-50 rounded-lg"><p className="font-semibold text-red-800">Attenzione:</p><p className="mt-1">La priorità **URGENTE** potrebbe prevedere **costi maggiorati**.</p></div><div className="flex gap-3"><button onClick={closeModal} className="flex-1 px-4 py-3 border rounded-lg">Annulla</button><button onClick={handleConfirmUrgentCreation} className="flex-1 px-4 py-3 bg-red-600 text-white rounded-lg font-bold flex items-center justify-center gap-2"><Check size={18}/>Accetta</button></div></div>;
            case 'invoiceReport': case 'sentReport': const { title, content, color } = modalState.data; return <div className="bg-white rounded-xl max-w-3xl w-full p-6 max-h-[90vh] overflow-y-auto"><div className="flex items-center justify-between mb-6 border-b pb-3"><h2 className={`text-2xl font-bold ${color} flex items-center gap-2`}><FileText size={24}/>{title}</h2><button onClick={closeModal} className="text-gray-400"><X size={24}/></button></div><div className="mb-4"><textarea readOnly value={content} rows={20} className="w-full p-4 border rounded-lg font-mono text-xs bg-gray-50"/></div><div className="flex gap-3"><button onClick={()=>{navigator.clipboard.writeText(content); showNotification('Copiato!','success')}} className="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg font-bold flex items-center justify-center gap-2"><Copy size={18}/>Copia</button></div></div>;
            default: return null;
        }
    };
    return <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 z-50">{renderModalContent()}</div>;
};

export default function TicketApp() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [users, setUsers] = useState(initialUsers);
  const [tickets, setTickets] = useState([]); // Lo stato ora parte con una lista VUOTA

useEffect(() => {
    // Questa funzione viene eseguita in automatico quando l'app si carica
    const fetchTickets = async () => {
        // Controlliamo se l'URL del backend esiste prima di fare la chiamata
        if (!process.env.REACT_APP_API_URL) {
            console.error("URL dell'API non configurato!");
            return;
        }
        try {
            // Chiama il backend per avere la lista dei ticket
            const response = await fetch(`${process.env.REACT_APP_API_URL}/api/tickets`);
            const data = await response.json();
            setTickets(data); // Aggiorna la lista con i dati VERI presi dal database
        } catch (error) {
            console.error("Errore nel caricare i ticket:", error);
            // In caso di errore, potresti voler mostrare una notifica
            // showNotification("Impossibile caricare i dati dal server.", "error");
        }
    };

    // Carichiamo i ticket solo se l'utente è loggato
    if (isLoggedIn) {
        fetchTickets();
    }
}, [isLoggedIn]); // Questa riga dice a React di eseguire il codice ogni volta che l'utente fa il login
  const [selectedTicket, setSelectedTicket] = useState(null);
  const [loginData, setLoginData] = useState({ email: '', password: '' });
  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' });
  const [modalState, setModalState] = useState({ type: null, data: null });
  const [newTicketData, setNewTicketData] = useState({ titolo: '', descrizione: '', categoria: 'assistenza', priorita: 'media', nomeRichiedente: '' });
  const [settingsData, setSettingsData] = useState({ nome: '', email: '', vecchiaPassword: '', nuovaPassword: '', confermaNuovaPassword: '' });
  const [newClientData, setNewClientData] = useState({ email: '', password: '', telefono: '', azienda: '' });
  const [timeLogs, setTimeLogs] = useState([]);
  const [isEditingTicket, setIsEditingTicket] = useState(null);
  const [selectedClientForNewTicket, setSelectedClientForNewTicket] = useState('');
  
  const clientiAttivi = users.filter(u => u.ruolo === 'cliente');

  const showNotification=(m,t='success')=>{setNotification({show:true,message:m,type:t});setTimeout(()=>setNotification(p=>({...p,show:false})),4000);};
  const closeModal=()=>{if(modalState.type==='newTicket'){resetNewTicketData();setSelectedClientForNewTicket('');setIsEditingTicket(null);}setModalState({type:null,data:null});};
  const resetNewTicketData=()=>setNewTicketData({titolo:'',descrizione:'',categoria:'assistenza',priorita:'media',nomeRichiedente:currentUser?`${currentUser.nome} ${currentUser.cognome||''}`.trim():''});

  const openNewTicketModal=()=>{if(currentUser.ruolo==='tecnico'&&clientiAttivi.length>0)setSelectedClientForNewTicket(clientiAttivi[0].id.toString());else setSelectedClientForNewTicket('');resetNewTicketData();setModalState({type:'newTicket',data:null});};
  const handleOpenEditModal=(t)=>{setNewTicketData({titolo:t.titolo,descrizione:t.descrizione,categoria:t.categoria,priorita:t.priorita,nomeRichiedente:t.nomeRichiedente});setIsEditingTicket(t.id);setSelectedClientForNewTicket(t.clienteId.toString());setModalState({type:'newTicket',data:t});};
  const openSettings=()=>{setSettingsData({nome:currentUser.nome,email:currentUser.email,vecchiaPassword:'',nuovaPassword:'',confermaNuovaPassword:''});setModalState({type:'settings',data:null});};
  const handleOpenTimeLogger=(t)=>{setSelectedTicket(t);const l=Array.isArray(t.timeLogs)?t.timeLogs:[];const i=l.length>0?l.map(lg=>({...lg,id:Date.now()+Math.random(),materials:Array.isArray(lg.materials)?lg.materials.map(m=>({...m,id:Date.now()+Math.random()})):[getInitialMaterial()]})):[getInitialTimeLog()];setTimeLogs(i);setModalState({type:'timeLogger',data:t});};
  
  const handleLogin=()=>{const u=users.find(u=>u.email===loginData.email&&u.password===loginData.password);if(u){setCurrentUser(u);setIsLoggedIn(true);setLoginData({email:'',password:''});showNotification(`Benvenuto ${u.nome}!`,'success');}else{showNotification('Credenziali non valide.','error');}};
  const handleLogout=()=>{setIsLoggedIn(false);setCurrentUser(null);setSelectedTicket(null);closeModal();showNotification('Disconnessione effettuata.','info');};
  const handleAutoFillLogin=(r)=>{const u=users.find(u=>u.ruolo===r);if(u){setLoginData({email:u.email,password:u.password});setTimeout(handleLogin,100);}};

  const handleUpdateSettings=()=>{if(!settingsData.nome||!settingsData.email){showNotification('Nome ed email obbligatori.','error');return}if(settingsData.nuovaPassword){if(settingsData.nuovaPassword!==settingsData.confermaNuovaPassword){showNotification('Le password non coincidono.','error');return}if(currentUser.password!==settingsData.vecchiaPassword){showNotification('Vecchia password errata.','error');return}}const u=users.map(us=>us.id===currentUser.id?{...us,nome:settingsData.nome,email:settingsData.email,password:settingsData.nuovaPassword||us.password}:us);setUsers(u);setCurrentUser(u.find(us=>us.id===currentUser.id));closeModal();showNotification('Impostazioni aggiornate!','success');};
  const handleCreateClient=()=>{if(!newClientData.email||!newClientData.password||!newClientData.azienda){showNotification('Email, password e azienda sono obbligatori.','error');return}if(users.some(u=>u.email===newClientData.email)){showNotification('Email già registrata.','error');return}const n={id:users.length+1,...newClientData,ruolo:'cliente',nome:'Non Specificato',cognome:''};setUsers(p=>[...p,n]);closeModal();setNewClientData({email:'',password:'',telefono:'',azienda:''});showNotification('Cliente creato!','success');};
  const handleCreateTicket=()=>{if(isEditingTicket){handleUpdateTicket();return}if(!newTicketData.titolo||!newTicketData.descrizione||!newTicketData.nomeRichiedente){showNotification('Compila i campi obbligatori.','error');return}if(currentUser.ruolo==='tecnico'&&!selectedClientForNewTicket){showNotification('Seleziona un cliente.','error');return}if(newTicketData.priorita==='urgente'&&currentUser.ruolo==='cliente'){setModalState({type:'urgentConfirm',data:null});return}handleConfirmUrgentCreation();};
  const handleConfirmUrgentCreation=()=>{if(!newTicketData.titolo||!newTicketData.descrizione||!newTicketData.nomeRichiedente){showNotification('Campi obbligatori mancanti.','error');closeModal();return}let cId=currentUser.ruolo==='tecnico'?parseInt(selectedClientForNewTicket):currentUser.id;const n={id:tickets.length+1,numero:`TKT-2025-${String(tickets.length+1).padStart(3,'0')}`,clienteId:cId,stato:'aperto',dataApertura:new Date().toISOString(),daFatturare:true,timeLogs:[],messaggi:[{id:1,autore:newTicketData.nomeRichiedente,contenuto:newTicketData.descrizione,data:new Date().toISOString()}],isNew:true,...newTicketData};setTickets(p=>[n,...p]);closeModal();showNotification('Ticket creato!','success');if(currentUser.ruolo==='cliente')setSelectedTicket(n);};
  const handleUpdateTicket=()=>{if(!newTicketData.titolo||!newTicketData.descrizione||!newTicketData.nomeRichiedente){showNotification('Compila i campi obbligatori.','error');return}const o=tickets.find(t=>t.id===isEditingTicket);const cId=currentUser.ruolo==='tecnico'?(selectedClientForNewTicket?parseInt(selectedClientForNewTicket):o.clienteId):o.clienteId;const u={...o,...newTicketData,clienteId:cId};setTickets(p=>p.map(t=>t.id===isEditingTicket?u:t));if(selectedTicket?.id===isEditingTicket)setSelectedTicket(u);showNotification('Ticket aggiornato!','success');closeModal();};
  const handleDeleteTicket=(id)=>{if(selectedTicket?.id===id)setSelectedTicket(null);setTickets(p=>p.filter(t=>t.id!==id));showNotification('Ticket eliminato.','error');};
  const handleSendMessage=(id,msg,isR=false)=>{if(!msg.trim())return;setTickets(p=>p.map(t=>{if(t.id===id){const a=currentUser.ruolo==='cliente'?t.nomeRichiedente:'Tecnico';const u={...t,messaggi:[...t.messaggi,{id:t.messaggi.length+1,autore:a,contenuto:msg,data:new Date().toISOString(),reclamo:isR}],stato:isR?'in_lavorazione':(currentUser.ruolo==='tecnico'&&t.stato==='risolto'?'in_lavorazione':t.stato)};if(selectedTicket?.id===id)setSelectedTicket(u);return u}return t;}));if(isR)showNotification('Reclamo inviato! Ticket riaperto.','error');};
  const handleChangeStatus=(id,s)=>{const t=tickets.find(tk=>tk.id===id);if(!t)return;if(s==='risolto'&&currentUser.ruolo==='tecnico'){handleOpenTimeLogger(t);return}setTickets(p=>p.map(tk=>{if(tk.id===id){const u={...tk,stato:s,dataChiusura:['chiuso','inviato'].includes(s)?new Date().toISOString():tk.dataChiusura};if(s==='risolto'&&currentUser.ruolo==='tecnico')setSelectedTicket(null);if(s==='chiuso'&&currentUser.ruolo==='cliente')setSelectedTicket(null);if(selectedTicket?.id===id&&!['risolto','chiuso','inviato'].includes(s))setSelectedTicket(u);return u}return tk;}));};
  
  const handleTimeLogChange=(id,f,v)=>{setTimeLogs(p=>p.map(l=>l.id===id?{...l,[f]:v}:l));};
  const handleAddTimeLog=()=>{setTimeLogs(p=>[...p,getInitialTimeLog()]);};
  const handleDuplicateTimeLog=(l)=>{setTimeLogs(p=>[...p,{...l,id:Date.now()}]);};
  const handleRemoveTimeLog=(id)=>{setTimeLogs(p=>p.filter(l=>l.id!==id));};
  const handleMaterialChange=(lId,mId,f,v)=>{setTimeLogs(pL=>pL.map(l=>l.id===lId?{...l,materials:l.materials.map(m=>m.id===mId?{...m,[f]:['quantita','costo'].includes(f)?parseFloat(v)||0:v}:m)}:l))};
  const handleAddMaterial=(lId)=>{setTimeLogs(pL=>pL.map(l=>l.id===lId?{...l,materials:[...(l.materials||[]),getInitialMaterial()]}:l))};
  const handleRemoveMaterial=(lId,mId)=>{setTimeLogs(pL=>pL.map(l=>l.id===lId?{...l,materials:l.materials.filter(m=>m.id!==mId)}:l))};
  const handleConfirmTimeLogs=()=>{if(!timeLogs.length){showNotification('Registra almeno un intervento.','error');return}const v=timeLogs.map(l=>{if(l.data&&l.oraInizio&&l.oraFine){const{id,...c}=l;const m=c.materials?.map(({id,...mat})=>mat).filter(mat=>mat.nome&&mat.quantita>0)||[];return{...c,materials:m};}return null}).filter(Boolean);if(!v.length){showNotification('Nessun intervento valido.','error');return}setTickets(p=>p.map(t=>t.id===selectedTicket.id?{...t,stato:selectedTicket.stato==='in_lavorazione'?'risolto':selectedTicket.stato,timeLogs:v}:t));showNotification(`Interventi registrati per ${selectedTicket.numero}.`,'success');closeModal();setSelectedTicket(null);};
  
  const handleSetInviato=(id)=>{setTickets(p=>p.map(t=>(t.id===id&&t.stato==='chiuso'?{...t,stato:'inviato',dataChiusura:new Date().toISOString()}:t)));showNotification('Ticket spostato in INVIATO.','info');setSelectedTicket(null);};
  const handleReopenInLavorazione=(id)=>{setTickets(p=>p.map(t=>(t.id===id&&t.stato==='risolto'?{...t,stato:'in_lavorazione',dataChiusura:undefined}:t)));showNotification('Ticket riaperto.','info');setSelectedTicket(null);};
  const handleReopenAsRisolto=(id)=>{setTickets(p=>p.map(t=>(t.id===id&&t.stato==='chiuso'?{...t,stato:'risolto',dataChiusura:undefined}:t)));showNotification('Ticket riaperto.','info');setSelectedTicket(null);};
  const handleArchiveTicket=(id)=>{setTickets(p=>p.map(t=>(t.id===id&&t.stato==='inviato'?{...t,stato:'chiuso'}:t)));showNotification('Ticket archiviato.','success');setSelectedTicket(null);};
  const handleInvoiceTicket=(id)=>{setTickets(p=>p.map(t=>(t.id===id?{...t,stato:'fatturato'}:t)));showNotification('Ticket fatturato!','success');};
  const handleSelectTicket=(t)=>{if(t.isNew&&currentUser.ruolo==='tecnico')setTickets(p=>p.map(tk=>tk.id===t.id?{...tk,isNew:false}:tk));setSelectedTicket(selectedTicket?.id===t.id?null:t);};
  
  const handleGenerateSentReport=(f)=>{if(!f.length){showNotification('Nessun ticket da includere.','info');return}const g = f.reduce((acc, t) => {
    (acc[t.clienteId] = acc[t.clienteId] || []).push(t);
    return acc;
}, {});let r=Object.keys(g).map(cId=>{const tks=g[cId];const c=users.find(u=>u.id==parseInt(cId));let cR=`Report per ${c?.azienda||'Sconosciuto'}\n---\n`;cR+=tks.map(t=>{let lS=t.timeLogs?.length?t.timeLogs.map(l=>` - ${formatReportDate(l.data)} (${l.oraInizio}-${l.oraFine}): ${l.descrizione||'N/D'}`).join('\n'):'Nessun log.';let mS='Nessun materiale.';if(t.timeLogs){const m=t.timeLogs.flatMap((l,i)=>l.materials?.filter(mt=>mt.nome).map(mt=>` - [Log ${i+1}] ${mt.nome}(x${mt.quantita})`)??[]);if(m.length)mS=m.join('\n')}return`${t.numero}-${t.titolo}\nLog:\n${lS}\nMateriali:\n${mS}`}).join('\n---\n');return cR}).join('\n\n\n');setModalState({type:'sentReport',data:{title:'Report Interventi Inviati',content:r.trim(),color:'text-gray-700'}});};
  const handleGenerateInvoiceReport=(f)=>{if(!f.length){showNotification('Nessun ticket da includere.','info');return}let rB=f.map(t=>{const c=users.find(u=>u.id===t.clienteId);let lS=t.timeLogs?.length?t.timeLogs.map(l=>` - ${l.data} (${l.oraInizio}-${l.oraFine}): ${l.descrizione}`).join('\n'):'Nessun log.';let mS='Nessun materiale.';if(t.timeLogs){const m=t.timeLogs.flatMap((l,i)=>l.materials?.map(mt=>` - [Log ${i+1}] ${mt.nome}(x${mt.quantita})`)??[]);if(m.length)mS=m.join('\n')}return`TICKET:${t.numero}\nCLIENTE:${c?.azienda||'Sconosciuto'}\nCHIUSURA:${formatDate(t.dataChiusura)}\nTITOLO:${t.titolo}\n\nLOG:\n${lS}\n\nMATERIALI:\n${mS}`}).join('\n---\n');setModalState({type:'invoiceReport',data:{title:'Lista Interventi Fatturati',content:`Report Fatturati\n---\n${rB.trim()}`,color:'text-indigo-700'}});};

  if (!isLoggedIn) {
    return (<><Notification notification={notification} setNotification={setNotification}/><LoginScreen loginData={loginData} setLoginData={setLoginData} handleLogin={handleLogin} handleAutoFillLogin={handleAutoFillLogin}/></>);
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Notification notification={notification} setNotification={setNotification}/>
      <Header currentUser={currentUser} handleLogout={handleLogout} openNewTicketModal={openNewTicketModal} openNewClientModal={()=>setModalState({type:'newClient'})} openSettings={openSettings}/>
      <main className="max-w-7xl mx-auto px-4 py-6">
        <TicketListContainer currentUser={currentUser} tickets={tickets} users={users} clientiAttivi={clientiAttivi} selectedTicket={selectedTicket} handleSelectTicket={handleSelectTicket} handleOpenEditModal={handleOpenEditModal} handleOpenTimeLogger={handleOpenTimeLogger} handleReopenInLavorazione={handleReopenInLavorazione} handleChangeStatus={handleChangeStatus} handleReopenAsRisolto={handleReopenAsRisolto} handleSetInviato={handleSetInviato} handleArchiveTicket={handleArchiveTicket} handleInvoiceTicket={handleInvoiceTicket} handleDeleteTicket={handleDeleteTicket} showNotification={showNotification} handleSendMessage={handleSendMessage} handleGenerateSentReport={handleGenerateSentReport} handleGenerateInvoiceReport={handleGenerateInvoiceReport}/>
      </main>
      <AllModals modalState={modalState} closeModal={closeModal} newTicketData={newTicketData} setNewTicketData={setNewTicketData} handleCreateTicket={handleCreateTicket} isEditingTicket={isEditingTicket} currentUser={currentUser} clientiAttivi={clientiAttivi} selectedClientForNewTicket={selectedClientForNewTicket} setSelectedClientForNewTicket={setSelectedClientForNewTicket} resetNewTicketData={resetNewTicketData} timeLogs={timeLogs} setTimeLogs={setTimeLogs} handleTimeLogChange={handleTimeLogChange} handleAddTimeLog={handleAddTimeLog} handleRemoveTimeLog={handleRemoveTimeLog} handleDuplicateTimeLog={handleDuplicateTimeLog} handleMaterialChange={handleMaterialChange} handleAddMaterial={handleAddMaterial} handleRemoveMaterial={handleRemoveMaterial} handleConfirmTimeLogs={handleConfirmTimeLogs} settingsData={settingsData} setSettingsData={setSettingsData} handleUpdateSettings={handleUpdateSettings} newClientData={newClientData} setNewClientData={setNewClientData} handleCreateClient={handleCreateClient} handleConfirmUrgentCreation={handleConfirmUrgentCreation} showNotification={showNotification} calculateDurationHours={calculateDurationHours}/>
    </div>
  );
}